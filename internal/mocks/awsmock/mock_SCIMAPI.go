// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../aws/client.go

// Package mock_aws is a generated GoMock package.
package mock_aws

import (
	reflect "reflect"

	aws "github.com/awslabs/ssosync/internal/aws"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(arg0 *aws.User) (*aws.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*aws.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), arg0)
}

// FindGroupByDisplayName mocks base method.
func (m *MockClient) FindGroupByDisplayName(arg0 string) (*aws.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGroupByDisplayName", arg0)
	ret0, _ := ret[0].(*aws.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGroupByDisplayName indicates an expected call of FindGroupByDisplayName.
func (mr *MockClientMockRecorder) FindGroupByDisplayName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroupByDisplayName", reflect.TypeOf((*MockClient)(nil).FindGroupByDisplayName), arg0)
}

// FindUserByEmail mocks base method.
func (m *MockClient) FindUserByEmail(arg0 string) (*aws.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0)
	ret0, _ := ret[0].(*aws.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockClientMockRecorder) FindUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockClient)(nil).FindUserByEmail), arg0)
}

// UpdateUser mocks base method.
func (m *MockClient) UpdateUser(arg0 *aws.User) (*aws.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*aws.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClientMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClient)(nil).UpdateUser), arg0)
}
