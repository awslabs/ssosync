version: 0.2

env:
  variables:
    GO111MODULE: "on"
    git-credential-helper: yes            
    GOROOT:
    GOPATH:
    GOPROXY: direct
    git-credential-helper: yes
    GOVERSION: go1.24.3
    #MOCKERY_VERSION: v3.5.2
    #GOLANGCI_LINT_VERSION: v2.3.1
    #GORELEASER_VERSION: v2.11.2
    #UPX_VERSION: v4.2.4
    # Set VERBOSE=1 for detailed build output, or override via CodeBuild environment
    VERBOSE: 0
phases:
  install: 
    commands:
      # Update the repos
      #- apt-get -qq --yes update && apt-get -qq --yes upgrade
      - BUILD_DIR=$PWD
      - cd /root/.goenv/plugins/go-build/../.. && git pull && cd -
      - cd /root/.goenv && git fetch --all && git pull
      - cd $BUILD_DIR
      - goenv install ${GOVERSION#go}
      - goenv global ${GOVERSION#go}
      # Install development tools using Makefile (with verbose output if VERBOSE=1)
      - echo "Installing dependencies with VERBOSE=${VERBOSE}"
      - make install-deps
      - goenv rehash
      # Verify tool installations
      - make check-tools

  pre_build: 
    commands:
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env
      - go version
      - '[ "$(go version | awk ''{print $3}'')" = "${GOVERSION}" ] || (echo "Wrong go version" && exit 1)'

      # Setup project dependencies
      - make config

      # Check the Go code for common problems with 'go vet'
      - make vet


  build:
    commands:
      # Clean previous builds
      - make clean
      - make test

      # Build using goreleaser via Makefile
      - make go-build

      # Check we've built something useful
      - find dist/ -name "ssosync*" -type f | head -5
      - echo "Build completed with VERBOSE=${VERBOSE}"

  post_build:
    commands:
      # Tweak the .goreleaser.yml so it uses the variables from .Env (if patch still needed)
      - if [ -f cicd/build/build/goreleaser.patch ]; then patch .goreleaser.yml cicd/build/build/goreleaser.patch; fi

      # Verify the build works
      - |
        if [ -f dist/ssosync_linux_amd64_v1/ssosync ]; then
          ./dist/ssosync_linux_amd64_v1/ssosync --version
        elif [ -f dist/ssosync_linux_arm64_v8.2/ssosync ]; then
          ./dist/ssosync_linux_arm64_v8.2/ssosync --version
        else
          echo "Built binary not found in expected location"
          find dist/ -name "ssosync*" -type f
          exit 1
        fi

artifacts:
  files:
    - dist/**/*
cache:
  paths:
    - /root/.cache/go-build/**/*
    - "/go/pkg/**/*"
    - ".bin/**/*"  # Cache development tools installed by Makefile
  key: $GOVERSION-$(codebuild-hash-files 'go.sum')