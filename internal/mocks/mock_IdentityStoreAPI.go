// Code generated by MockGen. DO NOT EDIT.
// Source: ../aws-sdk-go/service/identitystore/identitystoreiface/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	identitystore "github.com/aws/aws-sdk-go/service/identitystore"
	gomock "github.com/golang/mock/gomock"
)

// MockIdentityStoreAPI is a mock of IdentityStoreAPI interface.
type MockIdentityStoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityStoreAPIMockRecorder
}

// MockIdentityStoreAPIMockRecorder is the mock recorder for MockIdentityStoreAPI.
type MockIdentityStoreAPIMockRecorder struct {
	mock *MockIdentityStoreAPI
}

// NewMockIdentityStoreAPI creates a new mock instance.
func NewMockIdentityStoreAPI(ctrl *gomock.Controller) *MockIdentityStoreAPI {
	mock := &MockIdentityStoreAPI{ctrl: ctrl}
	mock.recorder = &MockIdentityStoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityStoreAPI) EXPECT() *MockIdentityStoreAPIMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockIdentityStoreAPI) CreateGroup(arg0 *identitystore.CreateGroupInput) (*identitystore.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*identitystore.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroup), arg0)
}

// CreateGroupMembership mocks base method.
func (m *MockIdentityStoreAPI) CreateGroupMembership(arg0 *identitystore.CreateGroupMembershipInput) (*identitystore.CreateGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupMembership", arg0)
	ret0, _ := ret[0].(*identitystore.CreateGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupMembership indicates an expected call of CreateGroupMembership.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroupMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupMembership", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroupMembership), arg0)
}

// CreateGroupMembershipRequest mocks base method.
func (m *MockIdentityStoreAPI) CreateGroupMembershipRequest(arg0 *identitystore.CreateGroupMembershipInput) (*request.Request, *identitystore.CreateGroupMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.CreateGroupMembershipOutput)
	return ret0, ret1
}

// CreateGroupMembershipRequest indicates an expected call of CreateGroupMembershipRequest.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroupMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupMembershipRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroupMembershipRequest), arg0)
}

// CreateGroupMembershipWithContext mocks base method.
func (m *MockIdentityStoreAPI) CreateGroupMembershipWithContext(arg0 aws.Context, arg1 *identitystore.CreateGroupMembershipInput, arg2 ...request.Option) (*identitystore.CreateGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.CreateGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupMembershipWithContext indicates an expected call of CreateGroupMembershipWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroupMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupMembershipWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroupMembershipWithContext), varargs...)
}

// CreateGroupRequest mocks base method.
func (m *MockIdentityStoreAPI) CreateGroupRequest(arg0 *identitystore.CreateGroupInput) (*request.Request, *identitystore.CreateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.CreateGroupOutput)
	return ret0, ret1
}

// CreateGroupRequest indicates an expected call of CreateGroupRequest.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroupRequest), arg0)
}

// CreateGroupWithContext mocks base method.
func (m *MockIdentityStoreAPI) CreateGroupWithContext(arg0 aws.Context, arg1 *identitystore.CreateGroupInput, arg2 ...request.Option) (*identitystore.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithContext indicates an expected call of CreateGroupWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) CreateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateGroupWithContext), varargs...)
}

// CreateUser mocks base method.
func (m *MockIdentityStoreAPI) CreateUser(arg0 *identitystore.CreateUserInput) (*identitystore.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*identitystore.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIdentityStoreAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method.
func (m *MockIdentityStoreAPI) CreateUserRequest(arg0 *identitystore.CreateUserInput) (*request.Request, *identitystore.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest.
func (mr *MockIdentityStoreAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method.
func (m *MockIdentityStoreAPI) CreateUserWithContext(arg0 aws.Context, arg1 *identitystore.CreateUserInput, arg2 ...request.Option) (*identitystore.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroup(arg0 *identitystore.DeleteGroupInput) (*identitystore.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*identitystore.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupMembership mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroupMembership(arg0 *identitystore.DeleteGroupMembershipInput) (*identitystore.DeleteGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupMembership", arg0)
	ret0, _ := ret[0].(*identitystore.DeleteGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupMembership indicates an expected call of DeleteGroupMembership.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroupMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMembership", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroupMembership), arg0)
}

// DeleteGroupMembershipRequest mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroupMembershipRequest(arg0 *identitystore.DeleteGroupMembershipInput) (*request.Request, *identitystore.DeleteGroupMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DeleteGroupMembershipOutput)
	return ret0, ret1
}

// DeleteGroupMembershipRequest indicates an expected call of DeleteGroupMembershipRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroupMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMembershipRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroupMembershipRequest), arg0)
}

// DeleteGroupMembershipWithContext mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroupMembershipWithContext(arg0 aws.Context, arg1 *identitystore.DeleteGroupMembershipInput, arg2 ...request.Option) (*identitystore.DeleteGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DeleteGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupMembershipWithContext indicates an expected call of DeleteGroupMembershipWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroupMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMembershipWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroupMembershipWithContext), varargs...)
}

// DeleteGroupRequest mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroupRequest(arg0 *identitystore.DeleteGroupInput) (*request.Request, *identitystore.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method.
func (m *MockIdentityStoreAPI) DeleteGroupWithContext(arg0 aws.Context, arg1 *identitystore.DeleteGroupInput, arg2 ...request.Option) (*identitystore.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteGroupWithContext), varargs...)
}

// DeleteUser mocks base method.
func (m *MockIdentityStoreAPI) DeleteUser(arg0 *identitystore.DeleteUserInput) (*identitystore.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*identitystore.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method.
func (m *MockIdentityStoreAPI) DeleteUserRequest(arg0 *identitystore.DeleteUserInput) (*request.Request, *identitystore.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method.
func (m *MockIdentityStoreAPI) DeleteUserWithContext(arg0 aws.Context, arg1 *identitystore.DeleteUserInput, arg2 ...request.Option) (*identitystore.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DeleteUserWithContext), varargs...)
}

// DescribeGroup mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroup(arg0 *identitystore.DescribeGroupInput) (*identitystore.DescribeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroup", arg0)
	ret0, _ := ret[0].(*identitystore.DescribeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroup indicates an expected call of DescribeGroup.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroup", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroup), arg0)
}

// DescribeGroupMembership mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroupMembership(arg0 *identitystore.DescribeGroupMembershipInput) (*identitystore.DescribeGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroupMembership", arg0)
	ret0, _ := ret[0].(*identitystore.DescribeGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroupMembership indicates an expected call of DescribeGroupMembership.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroupMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupMembership", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroupMembership), arg0)
}

// DescribeGroupMembershipRequest mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroupMembershipRequest(arg0 *identitystore.DescribeGroupMembershipInput) (*request.Request, *identitystore.DescribeGroupMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroupMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DescribeGroupMembershipOutput)
	return ret0, ret1
}

// DescribeGroupMembershipRequest indicates an expected call of DescribeGroupMembershipRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroupMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupMembershipRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroupMembershipRequest), arg0)
}

// DescribeGroupMembershipWithContext mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroupMembershipWithContext(arg0 aws.Context, arg1 *identitystore.DescribeGroupMembershipInput, arg2 ...request.Option) (*identitystore.DescribeGroupMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGroupMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroupMembershipWithContext indicates an expected call of DescribeGroupMembershipWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroupMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupMembershipWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroupMembershipWithContext), varargs...)
}

// DescribeGroupRequest mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroupRequest(arg0 *identitystore.DescribeGroupInput) (*request.Request, *identitystore.DescribeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DescribeGroupOutput)
	return ret0, ret1
}

// DescribeGroupRequest indicates an expected call of DescribeGroupRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroupRequest), arg0)
}

// DescribeGroupWithContext mocks base method.
func (m *MockIdentityStoreAPI) DescribeGroupWithContext(arg0 aws.Context, arg1 *identitystore.DescribeGroupInput, arg2 ...request.Option) (*identitystore.DescribeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroupWithContext indicates an expected call of DescribeGroupWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeGroupWithContext), varargs...)
}

// DescribeUser mocks base method.
func (m *MockIdentityStoreAPI) DescribeUser(arg0 *identitystore.DescribeUserInput) (*identitystore.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUser", arg0)
	ret0, _ := ret[0].(*identitystore.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeUser), arg0)
}

// DescribeUserRequest mocks base method.
func (m *MockIdentityStoreAPI) DescribeUserRequest(arg0 *identitystore.DescribeUserInput) (*request.Request, *identitystore.DescribeUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.DescribeUserOutput)
	return ret0, ret1
}

// DescribeUserRequest indicates an expected call of DescribeUserRequest.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeUserRequest), arg0)
}

// DescribeUserWithContext mocks base method.
func (m *MockIdentityStoreAPI) DescribeUserWithContext(arg0 aws.Context, arg1 *identitystore.DescribeUserInput, arg2 ...request.Option) (*identitystore.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserWithContext indicates an expected call of DescribeUserWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) DescribeUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).DescribeUserWithContext), varargs...)
}

// GetGroupId mocks base method.
func (m *MockIdentityStoreAPI) GetGroupId(arg0 *identitystore.GetGroupIdInput) (*identitystore.GetGroupIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupId", arg0)
	ret0, _ := ret[0].(*identitystore.GetGroupIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupId indicates an expected call of GetGroupId.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupId", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupId), arg0)
}

// GetGroupIdRequest mocks base method.
func (m *MockIdentityStoreAPI) GetGroupIdRequest(arg0 *identitystore.GetGroupIdInput) (*request.Request, *identitystore.GetGroupIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.GetGroupIdOutput)
	return ret0, ret1
}

// GetGroupIdRequest indicates an expected call of GetGroupIdRequest.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIdRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupIdRequest), arg0)
}

// GetGroupIdWithContext mocks base method.
func (m *MockIdentityStoreAPI) GetGroupIdWithContext(arg0 aws.Context, arg1 *identitystore.GetGroupIdInput, arg2 ...request.Option) (*identitystore.GetGroupIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupIdWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.GetGroupIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupIdWithContext indicates an expected call of GetGroupIdWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIdWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupIdWithContext), varargs...)
}

// GetGroupMembershipId mocks base method.
func (m *MockIdentityStoreAPI) GetGroupMembershipId(arg0 *identitystore.GetGroupMembershipIdInput) (*identitystore.GetGroupMembershipIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembershipId", arg0)
	ret0, _ := ret[0].(*identitystore.GetGroupMembershipIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembershipId indicates an expected call of GetGroupMembershipId.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupMembershipId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembershipId", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupMembershipId), arg0)
}

// GetGroupMembershipIdRequest mocks base method.
func (m *MockIdentityStoreAPI) GetGroupMembershipIdRequest(arg0 *identitystore.GetGroupMembershipIdInput) (*request.Request, *identitystore.GetGroupMembershipIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembershipIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.GetGroupMembershipIdOutput)
	return ret0, ret1
}

// GetGroupMembershipIdRequest indicates an expected call of GetGroupMembershipIdRequest.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupMembershipIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembershipIdRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupMembershipIdRequest), arg0)
}

// GetGroupMembershipIdWithContext mocks base method.
func (m *MockIdentityStoreAPI) GetGroupMembershipIdWithContext(arg0 aws.Context, arg1 *identitystore.GetGroupMembershipIdInput, arg2 ...request.Option) (*identitystore.GetGroupMembershipIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMembershipIdWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.GetGroupMembershipIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembershipIdWithContext indicates an expected call of GetGroupMembershipIdWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) GetGroupMembershipIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembershipIdWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetGroupMembershipIdWithContext), varargs...)
}

// GetUserId mocks base method.
func (m *MockIdentityStoreAPI) GetUserId(arg0 *identitystore.GetUserIdInput) (*identitystore.GetUserIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", arg0)
	ret0, _ := ret[0].(*identitystore.GetUserIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockIdentityStoreAPIMockRecorder) GetUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetUserId), arg0)
}

// GetUserIdRequest mocks base method.
func (m *MockIdentityStoreAPI) GetUserIdRequest(arg0 *identitystore.GetUserIdInput) (*request.Request, *identitystore.GetUserIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.GetUserIdOutput)
	return ret0, ret1
}

// GetUserIdRequest indicates an expected call of GetUserIdRequest.
func (mr *MockIdentityStoreAPIMockRecorder) GetUserIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetUserIdRequest), arg0)
}

// GetUserIdWithContext mocks base method.
func (m *MockIdentityStoreAPI) GetUserIdWithContext(arg0 aws.Context, arg1 *identitystore.GetUserIdInput, arg2 ...request.Option) (*identitystore.GetUserIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserIdWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.GetUserIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdWithContext indicates an expected call of GetUserIdWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) GetUserIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).GetUserIdWithContext), varargs...)
}

// IsMemberInGroups mocks base method.
func (m *MockIdentityStoreAPI) IsMemberInGroups(arg0 *identitystore.IsMemberInGroupsInput) (*identitystore.IsMemberInGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberInGroups", arg0)
	ret0, _ := ret[0].(*identitystore.IsMemberInGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberInGroups indicates an expected call of IsMemberInGroups.
func (mr *MockIdentityStoreAPIMockRecorder) IsMemberInGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberInGroups", reflect.TypeOf((*MockIdentityStoreAPI)(nil).IsMemberInGroups), arg0)
}

// IsMemberInGroupsRequest mocks base method.
func (m *MockIdentityStoreAPI) IsMemberInGroupsRequest(arg0 *identitystore.IsMemberInGroupsInput) (*request.Request, *identitystore.IsMemberInGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberInGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.IsMemberInGroupsOutput)
	return ret0, ret1
}

// IsMemberInGroupsRequest indicates an expected call of IsMemberInGroupsRequest.
func (mr *MockIdentityStoreAPIMockRecorder) IsMemberInGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberInGroupsRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).IsMemberInGroupsRequest), arg0)
}

// IsMemberInGroupsWithContext mocks base method.
func (m *MockIdentityStoreAPI) IsMemberInGroupsWithContext(arg0 aws.Context, arg1 *identitystore.IsMemberInGroupsInput, arg2 ...request.Option) (*identitystore.IsMemberInGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsMemberInGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.IsMemberInGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberInGroupsWithContext indicates an expected call of IsMemberInGroupsWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) IsMemberInGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberInGroupsWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).IsMemberInGroupsWithContext), varargs...)
}

// ListGroupMemberships mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMemberships(arg0 *identitystore.ListGroupMembershipsInput) (*identitystore.ListGroupMembershipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMemberships", arg0)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMemberships indicates an expected call of ListGroupMemberships.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMemberships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMemberships", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMemberships), arg0)
}

// ListGroupMembershipsForMember mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsForMember(arg0 *identitystore.ListGroupMembershipsForMemberInput) (*identitystore.ListGroupMembershipsForMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMember", arg0)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsForMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembershipsForMember indicates an expected call of ListGroupMembershipsForMember.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsForMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMember", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsForMember), arg0)
}

// ListGroupMembershipsForMemberPages mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsForMemberPages(arg0 *identitystore.ListGroupMembershipsForMemberInput, arg1 func(*identitystore.ListGroupMembershipsForMemberOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMemberPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembershipsForMemberPages indicates an expected call of ListGroupMembershipsForMemberPages.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsForMemberPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMemberPages", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsForMemberPages), arg0, arg1)
}

// ListGroupMembershipsForMemberPagesWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsForMemberPagesWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupMembershipsForMemberInput, arg2 func(*identitystore.ListGroupMembershipsForMemberOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMemberPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembershipsForMemberPagesWithContext indicates an expected call of ListGroupMembershipsForMemberPagesWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsForMemberPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMemberPagesWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsForMemberPagesWithContext), varargs...)
}

// ListGroupMembershipsForMemberRequest mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsForMemberRequest(arg0 *identitystore.ListGroupMembershipsForMemberInput) (*request.Request, *identitystore.ListGroupMembershipsForMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.ListGroupMembershipsForMemberOutput)
	return ret0, ret1
}

// ListGroupMembershipsForMemberRequest indicates an expected call of ListGroupMembershipsForMemberRequest.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsForMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMemberRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsForMemberRequest), arg0)
}

// ListGroupMembershipsForMemberWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsForMemberWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupMembershipsForMemberInput, arg2 ...request.Option) (*identitystore.ListGroupMembershipsForMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMemberWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsForMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembershipsForMemberWithContext indicates an expected call of ListGroupMembershipsForMemberWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsForMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMemberWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsForMemberWithContext), varargs...)
}

// ListGroupMembershipsPages mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsPages(arg0 *identitystore.ListGroupMembershipsInput, arg1 func(*identitystore.ListGroupMembershipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembershipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembershipsPages indicates an expected call of ListGroupMembershipsPages.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsPages", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsPages), arg0, arg1)
}

// ListGroupMembershipsPagesWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsPagesWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupMembershipsInput, arg2 func(*identitystore.ListGroupMembershipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembershipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembershipsPagesWithContext indicates an expected call of ListGroupMembershipsPagesWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsPagesWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsPagesWithContext), varargs...)
}

// ListGroupMembershipsRequest mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsRequest(arg0 *identitystore.ListGroupMembershipsInput) (*request.Request, *identitystore.ListGroupMembershipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembershipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.ListGroupMembershipsOutput)
	return ret0, ret1
}

// ListGroupMembershipsRequest indicates an expected call of ListGroupMembershipsRequest.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsRequest), arg0)
}

// ListGroupMembershipsWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupMembershipsWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupMembershipsInput, arg2 ...request.Option) (*identitystore.ListGroupMembershipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembershipsWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembershipsWithContext indicates an expected call of ListGroupMembershipsWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupMembershipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupMembershipsWithContext), varargs...)
}

// ListGroups mocks base method.
func (m *MockIdentityStoreAPI) ListGroups(arg0 *identitystore.ListGroupsInput) (*identitystore.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0)
	ret0, _ := ret[0].(*identitystore.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroups), arg0)
}

// ListGroupsPages mocks base method.
func (m *MockIdentityStoreAPI) ListGroupsPages(arg0 *identitystore.ListGroupsInput, arg1 func(*identitystore.ListGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPages indicates an expected call of ListGroupsPages.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPages", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupsPages), arg0, arg1)
}

// ListGroupsPagesWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupsPagesWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupsInput, arg2 func(*identitystore.ListGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPagesWithContext indicates an expected call of ListGroupsPagesWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPagesWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupsPagesWithContext), varargs...)
}

// ListGroupsRequest mocks base method.
func (m *MockIdentityStoreAPI) ListGroupsRequest(arg0 *identitystore.ListGroupsInput) (*request.Request, *identitystore.ListGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.ListGroupsOutput)
	return ret0, ret1
}

// ListGroupsRequest indicates an expected call of ListGroupsRequest.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupsRequest), arg0)
}

// ListGroupsWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListGroupsWithContext(arg0 aws.Context, arg1 *identitystore.ListGroupsInput, arg2 ...request.Option) (*identitystore.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsWithContext indicates an expected call of ListGroupsWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListGroupsWithContext), varargs...)
}

// ListUsers mocks base method.
func (m *MockIdentityStoreAPI) ListUsers(arg0 *identitystore.ListUsersInput) (*identitystore.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*identitystore.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIdentityStoreAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method.
func (m *MockIdentityStoreAPI) ListUsersPages(arg0 *identitystore.ListUsersInput, arg1 func(*identitystore.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages.
func (mr *MockIdentityStoreAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListUsersPagesWithContext(arg0 aws.Context, arg1 *identitystore.ListUsersInput, arg2 func(*identitystore.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method.
func (m *MockIdentityStoreAPI) ListUsersRequest(arg0 *identitystore.ListUsersInput) (*request.Request, *identitystore.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest.
func (mr *MockIdentityStoreAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method.
func (m *MockIdentityStoreAPI) ListUsersWithContext(arg0 aws.Context, arg1 *identitystore.ListUsersInput, arg2 ...request.Option) (*identitystore.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).ListUsersWithContext), varargs...)
}

// UpdateGroup mocks base method.
func (m *MockIdentityStoreAPI) UpdateGroup(arg0 *identitystore.UpdateGroupInput) (*identitystore.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0)
	ret0, _ := ret[0].(*identitystore.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateGroup), arg0)
}

// UpdateGroupRequest mocks base method.
func (m *MockIdentityStoreAPI) UpdateGroupRequest(arg0 *identitystore.UpdateGroupInput) (*request.Request, *identitystore.UpdateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.UpdateGroupOutput)
	return ret0, ret1
}

// UpdateGroupRequest indicates an expected call of UpdateGroupRequest.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateGroupRequest), arg0)
}

// UpdateGroupWithContext mocks base method.
func (m *MockIdentityStoreAPI) UpdateGroupWithContext(arg0 aws.Context, arg1 *identitystore.UpdateGroupInput, arg2 ...request.Option) (*identitystore.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupWithContext indicates an expected call of UpdateGroupWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateGroupWithContext), varargs...)
}

// UpdateUser mocks base method.
func (m *MockIdentityStoreAPI) UpdateUser(arg0 *identitystore.UpdateUserInput) (*identitystore.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*identitystore.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method.
func (m *MockIdentityStoreAPI) UpdateUserRequest(arg0 *identitystore.UpdateUserInput) (*request.Request, *identitystore.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*identitystore.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method.
func (m *MockIdentityStoreAPI) UpdateUserWithContext(arg0 aws.Context, arg1 *identitystore.UpdateUserInput, arg2 ...request.Option) (*identitystore.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*identitystore.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext.
func (mr *MockIdentityStoreAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockIdentityStoreAPI)(nil).UpdateUserWithContext), varargs...)
}
