AWSTemplateFormatVersion: '2010-09-09'

Description: 
  This CloudFormation template will deploy a an IAM role and some Secrets to 
  allow the CI/CD pipeline in the production account to deploy candidate releases
  (via privately shared app in the AWS Serverless Application Repository (SAR).

Parameters:
  ManagementAccount:
    Description: AWS Account where staging build is automatically deployed and tested
    Type: String
    AllowedPattern: '[0-9]+'

  DelegatedAccount:
    Description: AWS Account where staging build is automatically deployed and tested
    Type: String
    AllowedPattern: '[0-9]+'

  NonDelegatedAccount:
    Description: AWS Account where staging build is automatically deployed and tested
    Type: String
    AllowedPattern: '[0-9]+'

  GoogleAuthMethod:
    Type: String
    AllowedValues: 
      - Google Credentials
      - Workload Identity Federation
      - Both
    Default: "Google Credentials"

  GoogleCredentials:
    Description: Google Workspaces Credentials File, to log into Google (content of credentials.json)
    Type: String
    AllowedPattern: '(?!.*\s)|(\{(\s)*(".*")(\s)*:(\s)*(".*")(\s)*\})'
    NoEcho: true

  GoogleAdminEmail:
    Description: Google Workspaces Admin email
    Type: String
    AllowedPattern: '(?!.*\s)|(([a-zA-Z0-9.+=_-]{0,61})@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)'      
    NoEcho: true

  WIFServiceAccountEmail:
    Description: Workload Identity Federation, the email address of service account used to impersonate a user using 
    Type: String
    AllowedPattern: '(?!.*\s)|(([a-zA-Z0-9.+=_-]{0,61})@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)'
    NoEcho: true

  WIFClientLibraryConfig:
    Description: Workload Identity Federation, the client library config file for the provider (AWS Account)  (contents of clientLibraryConfig-provider.json)
    Type: String
    AllowedPattern: '(?!.*\s)|(\{(\s)*(".*")(\s)*:(\s)*(".*")(\s)*\})'
    NoEcho: true

  SCIMEndpointUrl:
    Description: AWS IAM Identity Center SCIM Endpoint Url
    Type: String
    AllowedPattern: "https://scim.(us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-([0-9]{1}).amazonaws.com/(.*)-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12})/scim/v2/"
    NoEcho: true

  SCIMEndpointAccessToken:
    Description: AWS IAM Identity Center SCIM AccessToken
    Type: String
    AllowedPattern: '([0-9a-zA-Z/=+-\\]{500,600})'
    NoEcho: true  

  IdentityStoreId:
    Description: The Id of the Identity Store for the AWS IAM Identity Center instance see (settings page)
    Type: String
    AllowedPattern: "d-[1-z0-9]{10}"
    

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Test Environments
        Parameters:
          - ManagementAccount
          - DelegatedAccount
          - NonDelegatedAccount
      - Label:
          default: Google Authentication Method
        Parameters:
          - GoogleAuthMethod
      - Label:
          default: Parameters for Google Credentials based authentication, required if either Google Credentials or Both have been selected for Google Authentication Method
        Parameters:
          - GoogleAdminEmail
          - GoogleCredentials
      - Label: 
          default: Parameters for Workload Identity Federation based authentication, required if either Workload Identity Federation or Both have been selected for Google Authentication Method
        Parameters:
          - WIFServiceAccountEmail
          - WIFClientLibraryConfig
      - Label:
          default: AWS IAM Identity Center
        Parameters:
          - SCIMEndpointUrl
          - SCIMEndpointAccessToken
          - IdentityStoreId
            
    ParameterLabels:
      ManagementAccount:
        default: "What is the account id of the Test Orgs, Management account?"
      DelegatedAccount:
        default: "What is the account id of the Test Orgs, Delegated admin account?"
      NonDelegatedAccount:
        default: "What is the account id of the Test Orgs, Non-delegated admin account?"
      GoogleAuthMethod:
        default: "Which Google Auth Methods do you want to test with?"
      GoogleCredentials:
        default: "contents of credentials.json"
      GoogleAdminEmail:
        default: "admin@WorkspaceDomain"
      WIFServiceAccountEmail:
        default: "service-account@@WorkspaceDomain"
      WIFClientLibraryConfig:
        default: "contents of clientLibraryConfig-provider.json"
      SCIMEndpointUrl:
        default: "https://scim.<region>.amazonaws.com/<instance id>/scim/v2/"
      SCIMEndpointAccessToken:
        default: "AWS SSO SCIM Access Token"
      IdentityStoreId:
        default: "The Identity Store Id"

Conditions:
  CreateGoogle: !Or 
    - !Equals
        - !Ref GoogleAuthMethod
        - "Google Credentials"
    - !Equals
        - !Ref GoogleAuthMethod
        - "Both"
  CreateWIF: !Or
    - !Equals
        - !Ref GoogleAuthMethod
        - "Workload Identity Federation"
    - !Equals
        - !Ref GoogleAuthMethod
        - "Both"

  GoogleCreds: !Equals
    - !Ref GoogleAuthMethod
    - "Google Credentials"
  WIFCreds: !Equals
    - !Ref GoogleAuthMethod
    - "Workload Identity Federation"
  BothCreds: !Equals
    - !Ref GoogleAuthMethod
    - "Both"

Rules:
  # Fail when any assertion returns false
  # If they have selected Google Credentials then check they have provided valid data for GoogleCredentials
  GoogleCredentialsOnly:
    RuleCondition: !Or 
      - !Equals
          - !Ref GoogleAuthMethod
          - "Google Credentials"
      - !Equals
          - !Ref GoogleAuthMethod
          - "Both"
    Assertions:
      - AssertDescription: You have selected Google Credentials, You need to provide a Google Admin email address.
        Assert: !Not
          - !Equals
            - !Ref GoogleAdminEmail
            - "" 
      - AssertDescription: You have selected Google Credentials, You need to provide the content of a Credentials file (json).
        Assert: !Not
          - !Equals
            - !Ref GoogleCredentials
            - ""
  # If they have selected Workload Identity Federation, then check they have provide valid data for WIF
  WorkloadIdentityFederationOnly:
    RuleCondition: !Or
      - !Equals
          - !Ref GoogleAuthMethod
          - "Workload Identity Federation"
      - !Equals
          - !Ref GoogleAuthMethod
          - "Both"
    Assertions:
      - AssertDescription: You have selected Workload Identity Federation, You need to provide a Google Service Account email address.
        Assert: !Not
          - !Equals
            - !Ref WIFServiceAccountEmail
            - ""
      - AssertDescription: You have selected Workload Identity Federation, You need to provide the content of a Client Library Config file (json).
        Assert: !Not
          - !Equals
            - !Ref WIFClientLibraryConfig
            - ""

Resources:
  KeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/SSOSync
      TargetKeyId: !Ref KeyForSecrets

  KeyForSecrets:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Description: Key for protecting SSOSync Secrets in cross-account deployment
      Enabled: true
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: 'kms:*'
          Resource: '*'
        - Sid: DeployRole in Management account
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - kms:Decrypt
            - kms:DescribeKey
          Resource: '*'
        - Sid: DeployRole in Delegated Admin account
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - kms:Decrypt
            - kms:DescribeKey
          Resource: '*'
        - Sid: DeployRole in Non Delegated Admin account
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - kms:Decrypt
            - kms:DescribeKey
          Resource: '*'

  SecretGoogleCredentials:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateGoogle
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineGoogleCredentials
      SecretString: !Ref GoogleCredentials
      KmsKeyId: !Ref KeyAlias

  SecretGoogleCredentialsPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateGoogle
    Properties:
      SecretId: !Ref SecretGoogleCredentials
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretGoogleAdminEmail:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateGoogle
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineGoogleAdminEmail
      SecretString: !Ref GoogleAdminEmail
      KmsKeyId: !Ref KeyAlias

  SecretGoogleAdminEmailPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateGoogle
    Properties:
      SecretId: !Ref SecretGoogleAdminEmail
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretWIFServiceAccountEmail:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateWIF
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineWIFServiceAccountEmail
      SecretString: !Ref WIFServiceAccountEmail
      KmsKeyId: !Ref KeyAlias

  SecretWIFServiceAccountEmailPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateWIF
    Properties:
      SecretId: !Ref SecretWIFServiceAccountEmail
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretWIFClientLibraryConfig:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateWIF
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineWIFClientLibraryConfigSecret
      SecretString: !Ref WIFClientLibraryConfig
      KmsKeyId: !Ref KeyAlias

  SecretWIFClientLibraryConfigPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateWIF
    Properties:
      SecretId: !Ref SecretWIFClientLibraryConfig      
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretSCIMEndpoint: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineSCIMEndpointUrl
      SecretString: !Ref SCIMEndpointUrl
      KmsKeyId: !Ref KeyAlias

  SecretSCIMEndpointPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretSCIMEndpoint
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow      
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretSCIMAccessToken: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineSCIMAccessToken
      SecretString: !Ref SCIMEndpointAccessToken
      KmsKeyId: !Ref KeyAlias

  SecretSCIMAccessTokenPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretSCIMAccessToken
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretRegion: 
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineRegion
      SecretString: !Select [1, !Split [".", !Ref SCIMEndpointUrl]]
      KmsKeyId: !Ref KeyAlias

  SecretRegionPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretRegion
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

  SecretIdentityStoreID:
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: PipelineIdentityStoreId
      SecretString: !Ref IdentityStoreId
      KmsKeyId: !Ref KeyAlias

  SecretIdentityStoreIDPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretIdentityStoreID
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${ManagementAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${DelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${NonDelegatedAccount}:root
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
Outputs:
  TestConfigGoogleCreds:
    Condition: GoogleCreds
    Description: "The Comma Separated list of Secrets and KMS Key ARNs to copy and paste into the CrossStackConfig field of the app for cross-account stack."
    Value: !Sub ${SecretSCIMEndpoint},${SecretSCIMAccessToken},${SecretRegion},${SecretIdentityStoreID},${SecretGoogleCredentials},${SecretGoogleAdminEmail},"","",arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyForSecrets}
    Export:
      Name: TestConfig

  TestConfigWIFCreds:
    Condition: WIFCreds
    Description: "The Comma Separated list of Secrets and KMS Key ARNs to copy and paste into the CrossStackConfig field of the app for cross-account stack."
    Value: !Sub ${SecretSCIMEndpoint},${SecretSCIMAccessToken},${SecretRegion},${SecretIdentityStoreID},"","",${SecretWIFClientLibraryConfig},${SecretWIFServiceAccountEmail},arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyForSecrets}
    Export:
      Name: TestConfig

  TestConfigBoth:
    Condition: BothCreds
    Description: "The Comma Separated list of Secrets and KMS Key ARNs to copy and paste into the CrossStackConfig field of the app for cross-account stack."
    Value: !Sub ${SecretSCIMEndpoint},${SecretSCIMAccessToken},${SecretRegion},${SecretIdentityStoreID},${SecretGoogleCredentials},${SecretGoogleAdminEmail},${SecretWIFClientLibraryConfig},${SecretWIFServiceAccountEmail},arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyForSecrets}
    Export:
      Name: TestConfig
